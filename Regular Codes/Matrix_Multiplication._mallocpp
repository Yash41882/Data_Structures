// Matrix multiplication using Dynamic allocation

// Importing Necessary Header Files
// Malloc.h is the header file used to use malloc allocation
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>

using namespace std;

// Driver Code
int main() {

    // Decalting Variable N to store dimentions
    int N;

    printf("Enter matrix dimension: ");

    scanf("%d", &N);


    /* Allocating memory for the three matrices. */ 

    int **A = (int **) malloc(sizeof(int *) * N);
    int **B = (int **) malloc(sizeof(int *) * N); 
    int **C = (int **) malloc(sizeof(int *) * N); 
    

    for(int i=0; i<N; i++) {
 	    A[i] = (int *)malloc(sizeof(int) * N); 
    }   

    for(int i=0; i<N; i++) { 
 	    B[i] = (int *)malloc(sizeof(int) * N); 
    }
    
    for(int i=0; i<N; i++) { 
 	    C[i] = (int *)malloc(sizeof(int) * N); 
    }


    // Taking input from used of First Matrix
    printf("Enter elements of the matrix A: \n");

    for (int i = 0; i < N; i++) {

        for (int j = 0; j < N; j++) {

            scanf("%d", &A[i][j]);

        }

    }


    // Taking input from user of Second Martix
    printf("Enter elements of the matrix B: \n");

    for (int i = 0; i < N; i++) {

        for (int j = 0; j < N; j++) {

            scanf("%d", &B[i][j]);

        }

    }

    // Matrix Multipication is perfromed - 
    printf("Multiplying matrices...\n");

    for (int i = 0; i < N; i++) {

        for (int j = 0; j < N; j++) {

            C[i][j] = 0;

            for (int k = 0; k < N; k++) {

                C[i][j] += A[i][k] * B[k][j];

            }
        }
    }

    // Printing the resultant matrix
    printf("Resultant Matrix:\n");

    for (int i = 0; i < N; i++) {

        for (int j = 0; j < N; j++) {

            printf("%d\t", C[i][j]);

        }

        printf("\n");

    }


    // Freeing up space of dynamic allocation after computation is completed
    free(A);

    free(B);

    free(C);

    return 0;

}
